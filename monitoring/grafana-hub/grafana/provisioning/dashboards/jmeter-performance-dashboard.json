{
  "id": null,
  "title": "JMeter Performance Dashboard",
  "tags": ["jmeter", "performance"],
  "timezone": "browser",
  "schemaVersion": 36,
  "version": 0,
  "refresh": "5s",
  "panels": [
    {
      "id": 1,
      "title": "Average Response Time by Transaction",
      "type": "timeseries",
      "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0},
      "datasource": {"type": "influxdb", "uid": "influxdb"},
      "fieldConfig": {
        "defaults": {
          "unit": "ms",
          "custom": {
            "drawStyle": "line",
            "lineWidth": 2,
            "fillOpacity": 10,
            "gradientMode": "none",
            "showPoints": "never",
            "spanNulls": false
          },
          "color": {"mode": "palette-classic"},
          "thresholds": {
            "steps": [
              {"color": "green", "value": null},
              {"color": "red", "value": 80}
            ]
          }
        },
        "overrides": [
          {
            "matcher": {"id": "byName", "options": "All Transactions"},
            "properties": [
              {"id": "color", "value": {"fixedColor": "red", "mode": "fixed"}},
              {"id": "custom.lineWidth", "value": 3}
            ]
          }
        ]
      },
      "options": {
        "legend": {"displayMode": "list", "placement": "bottom"},
        "tooltip": {"mode": "multi", "sort": "none"}
      },
      "targets": [
        {
          "datasource": {"type": "influxdb", "uid": "influxdb"},
          "query": "individual = from(bucket: \"me\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\n  |> filter(fn: (r) => r[\"_field\"] == \"avg\")\n  |> filter(fn: (r) => r[\"transaction\"] != \"all\" and r[\"transaction\"] != \"internal\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"individual\")\n\nall = from(bucket: \"me\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\n  |> filter(fn: (r) => r[\"_field\"] == \"avg\")\n  |> filter(fn: (r) => r[\"transaction\"] == \"all\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> map(fn: (r) => ({ r with transaction: \"All Transactions\" }))\n  |> yield(name: \"all\")",
          "refId": "A"
        }
      ]
    },
    {
      "id": 2,
      "title": "Throughput (Requests per Second)",
      "type": "timeseries",
      "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0},
      "datasource": {"type": "influxdb", "uid": "influxdb"},
      "fieldConfig": {
        "defaults": {
          "unit": "reqps",
          "custom": {"drawStyle": "line", "lineWidth": 2},
          "color": {"mode": "palette-classic"}
        }
      },
      "options": {"legend": {"displayMode": "list"}},
      "targets": [
        {
          "datasource": {"type": "influxdb", "uid": "influxdb"},
          "query": "from(bucket: \"me\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\n  |> filter(fn: (r) => r[\"_field\"] == \"hit\")\n  |> filter(fn: (r) => r[\"transaction\"] == \"all\")\n  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: false)\n  |> map(fn: (r) => ({ r with _value: r._value / 60.0 }))",
          "refId": "A"
        }
      ]
    },
    {
      "id": 3,
      "title": "Error Rate Percentage",
      "type": "timeseries",
      "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8},
      "datasource": {"type": "influxdb", "uid": "influxdb"},
      "fieldConfig": {
        "defaults": {
          "unit": "percent",
          "custom": {"drawStyle": "line", "lineWidth": 2},
          "color": {"mode": "palette-classic"}
        }
      },
      "options": {"legend": {"displayMode": "list"}},
      "targets": [
        {
          "datasource": {"type": "influxdb", "uid": "influxdb"},
          "query": "from(bucket: \"me\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\n  |> filter(fn: (r) => r[\"transaction\"] == \"all\")\n  |> filter(fn: (r) => r[\"_field\"] =~ /count*/)\n  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: false)\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({\n    _time: r._time,\n    _value: if exists r.count and r.count > 0 then (float(v: r.countError) / float(v: r.count)) * 100.0 else 0.0\n  }))",
          "refId": "A"
        }
      ]
    },
    {
      "id": 4,
      "title": "Response Time Percentiles",
      "type": "timeseries",
      "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8},
      "datasource": {"type": "influxdb", "uid": "influxdb"},
      "fieldConfig": {
        "defaults": {
          "unit": "ms",
          "custom": {"drawStyle": "line", "lineWidth": 2},
          "color": {"mode": "palette-classic"}
        }
      },
      "options": {"legend": {"displayMode": "list"}},
      "targets": [
        {
          "datasource": {"type": "influxdb", "uid": "influxdb"},
          "query": "from(bucket: \"me\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"jmeter\")\n  |> filter(fn: (r) => r[\"transaction\"] == \"all\")\n  |> filter(fn: (r) => r[\"_field\"] =~ /pct90\\.0|pct95\\.0|pct99\\.0/)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ]
    }
  ],
  "time": {"from": "now-24h", "to": "now"},
  "timepicker": {},
  "templating": {"list": []},
  "annotations": {"list": []},
  "links": []
}
